<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright (c) 2015-2017, Joyent, Inc. All rights reserved.

 This Source Code Form is subject to the terms of the Mozilla Public
 License, v. 2.0. If a copy of the MPL was not distributed with this
 file, You can obtain one at http://mozilla.org/MPL/2.0/.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <artifactId>java-manta</artifactId>
        <groupId>com.joyent.manta</groupId>
        <version>3.2.3-SNAPSHOT</version>
    </parent>

    <artifactId>java-manta-it</artifactId>
    <version>3.2.3-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>java-manta-it</name>
    <description>Integration and functional tests for Java Manta SDK</description>

    <dependencies>
        <dependency>
            <groupId>com.joyent.manta</groupId>
            <artifactId>java-manta-client</artifactId>
            <version>3.2.3-SNAPSHOT</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>com.joyent.manta</groupId>
            <artifactId>java-manta-client-kryo-serialization</artifactId>
            <version>3.2.3-SNAPSHOT</version>
            <scope>compile</scope>
            <exclusions>
                <exclusion>
                    <groupId>com.joyent.manta</groupId>
                    <artifactId>java-manta-client-unshaded</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-collections4</artifactId>
            <version>${dependency.commons-collections.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>${dependency.commons-lang.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-text</artifactId>
            <version>${dependency.commons-text.version}</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.commons</groupId>
                    <artifactId>commons-lang3</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>${dependency.commons-codec.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>${dependency.commons-io.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Library for generating more robust UUIDs -->
        <dependency>
            <groupId>com.fasterxml.uuid</groupId>
            <artifactId>java-uuid-generator</artifactId>
            <version>${dependency.fasterxml-uuid}</version>
            <exclusions>
                <exclusion>
                    <groupId>log4j</groupId>
                    <artifactId>log4j</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- These dependencies are declared at the module level because we can not
             inherit exclusions from the parent. -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${dependency.logback.version}</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>${dependency.testng.version}</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <artifactId>junit</artifactId>
                    <groupId>junit</groupId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>com.github.tomakehurst</groupId>
            <artifactId>wiremock</artifactId>
            <version>2.18.0</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-api</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.fasterxml.jackson.core</groupId>
                    <artifactId>jackson-annotations</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.fasterxml.jackson.core</groupId>
                    <artifactId>jackson-core</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.fasterxml.jackson.core</groupId>
                    <artifactId>jackson-databind</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.apache.commons</groupId>
                    <artifactId>commons-lang3</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

    </dependencies>

    <build>
        <!-- To generate code coverage reports (of either unit or
             integration tests) jacoco needs access to both the
             original (pre-instrumentation) class files, and the
             source code.
             <http://www.jacoco.org/jacoco/trunk/doc/classids.html>
             describes how jacoco keeps track of classes in further
             detail.  There exist goals that can traverse a
             multi-module project and aggregate this information from
             the standard maven locations, but they are confounded by
             the shading+relocation step.  The final classes shipped
             in the client jar are *only* in the shaded client jar,
             and not in target/classes.

             To work around this and provide the necessary information
             requires jumping through several hoops to act as if the
             java-manta-client source files were part of the
             integration test module:

              * Add a new source location to java-manta-it to hold the
              "upstream" .java files from java-manta-client
              * Copy the source files there
              * Make sure the source are removed when not needed so
              they are never actually compiled.
              * Unpack the final relocated class files so they are
              available outside of just a jar.

             This scheme depends on there being no "src/main" classes
             in this integration test module.
        -->
        <plugins>
            <plugin>
                <artifactId>maven-clean-plugin</artifactId>
                <executions>
                    <!-- Remove src/shade-workaround after use.  This
                         is for tidyness but not correctness.  Note
                         that since this is bound to
                         post-integration-test it will run when
                         invoking verify, but not intgration-test -->
                    <execution>
                        <id>clean-shade-workaround-src-post</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                        <configuration>
                            <excludeDefaultDirectories>true</excludeDefaultDirectories>
                            <filesets>
                                <fileset>
                                    <directory>src/shade-workaround</directory>
                                </fileset>
                            </filesets>
                        </configuration>
                    </execution>
                    <!-- Ensure that src/shade-workaround is *always*
                         removed before a compile phase runs.  This is
                         for correctness. -->
                    <execution>
                        <id>clean-shade-workaround-src-pre</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                        <configuration>
                            <excludeDefaultDirectories>true</excludeDefaultDirectories>
                            <filesets>
                                <fileset>
                                    <directory>src/shade-workaround</directory>
                                </fileset>
                            </filesets>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>${maven-build-helper-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <id>add-shade-workaround-source</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>src/shade-workaround</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${maven-maven-resources-plugin.version}</version>
                <executions>
                    <execution>
                        <id>copy-shade-workaround-src</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>src/shade-workaround</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${multi.module.root}/java-manta-client-unshaded/src/main/java</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!-- unpack the modified-by-relocation classes from
                     the client jar -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>${maven-build-helper-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <id>unpack-relocated-classes</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>com.joyent.manta</groupId>
                                    <artifactId>java-manta-client</artifactId>
                                    <type>jar</type>
                                    <overWrite>true</overWrite>
                                    <outputDirectory>${project.build.directory}/classes</outputDirectory>
                                    <includes>**/*.class</includes>
                                    <excludes>com/joyent/manta/com/**,com/joyent/manta/org/**,com/joyent/manta/io/**,com/joyent/manta/http/signature/**</excludes>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>com.joyent.manta</groupId>
                                    <artifactId>java-manta-client-kryo-serialization</artifactId>
                                    <type>jar</type>
                                    <overWrite>false</overWrite>
                                    <outputDirectory>${project.build.directory}/classes</outputDirectory>
                                    <includes>**/*.class</includes>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <executions>
                    <execution>
                        <id>integration-tests</id>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                        <configuration>
                            <skip>${maven.integration.test.skip}</skip>
                            <parallel>classes</parallel>
                            <threadCount>4</threadCount>
                            <suiteXmlFiles>
                                <suiteXmlFile>src/test/resources/testng-it.xml</suiteXmlFile>
                            </suiteXmlFiles>
                            <!-- Need to exclude the unshaded module from the test runner's classpath -->
                            <classpathDependencyExcludes>
                                <classpathDependencyExcludes>com.joyent.manta:java-manta-client-unshaded</classpathDependencyExcludes>
                            </classpathDependencyExcludes>
                            <!-- uncomment to enable proxies with integration tests -->
                            <!--<systemPropertyVariables>-->
                                <!--<https.proxyHost>localhost</https.proxyHost>-->
                                <!--<https.proxyPort>8888</https.proxyPort>-->
                            <!--</systemPropertyVariables>-->
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <version>${maven-deploy-plugin.version}</version>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
